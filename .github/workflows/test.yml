on:
  push:
    branches:
      - "*"
jobs:
  test:
    runs-on: ubuntu-20.04
    container:
      image: ros:noetic
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y wget curl git python3-vcstool python3-catkin-tools xorg-dev x11-apps
          rosdep update
      - name: Build ROS Package
        id: build
        run: |
          mkdir -p ~/mujoco_ws/src/mujoco
          ln -s $(pwd) ~/mujoco_ws/src/mujoco/mujoco_vendor
          cd ~/mujoco_ws
          rosdep install -yri --from-paths src
          . /opt/ros/noetic/setup.sh
          catkin build
        continue-on-error: true
      - name: Record Build Status
        run: |
          if [ ${{ steps.build.outcome }} == "success" ]; then
          echo "BUILD_STATUS=success" >> $GITHUB_ENV
          else
          echo "BUILD_STATUS=failure" >> $GITHUB_ENV
          fi
      - name: Verify Generated Files
        run: |
          cd ~/mujoco_ws
          file_paths=(
            "devel/lib/libmujoco.so.3.0.0"
            "devel/lib/libmujoco.so"
            "devel/lib/mujoco/simulate"
            "devel/lib/mujoco/mujoco_plugin/libsdf.so"
            "devel/share/mujoco/model/humanoid/humanoid.xml"
          )
          for file_path in "${file_paths[@]}"; do
            if [ ! -f $file_path ]; then
              echo "File $file_path not found"
              echo "FILE_GENERATED=failed" >> $GITHUB_ENV
              exit 1
            fi
          done
          echo "FILE_GENERATED=success" >> $GITHUB_ENV
        continue-on-error: true
      - name: Verify Cpmmand
        run: |
          cd ~/mujoco_ws
          . devel/setup.bash
          if [[ -z $(catkin_find mujoco model/humanoid/humanoid.xml) ]]; then
            echo "COMMAND_STATUS=failed" >> $GITHUB_ENV
            exit 1
          fi
          timeout 5s rosrun mujoco simulate
          if [[ $? == 124 ]]; then
            echo "COMMAND_STATUS=failed" >> $GITHUB_ENV
            exit 1
          fi
          echo "COMMAND_STATUS=success" >> $GITHUB_ENV
        continue-on-error: true

      - name: Generate Badges
        run: |
          mkdir -p badges
          function generate_badge {
            if [ $2 == "success" ]; then
              curl -o badges/$1.svg https://img.shields.io/badge/$1-success-brightgreen
            else
              curl -o badges/$1.svg https://img.shields.io/badge/$1-failure-red
            fi
          }
          generate_badge "build" $BUILD_STATUS
          generate_badge "file_generated" $FILE_GENERATED
          generate_badge "command" $COMMAND_STATUS
      - name: Deploy Badges to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: badges
      - name: Check Statuses
        run: |
          if [ $BUILD_STATUS == "failure" || $FILE_GENERATED == "failure" || $COMMAND_STATUS == "failure" ]; then
            exit 1
          fi
